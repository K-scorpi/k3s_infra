package main

import (
	"context"
	"fmt"
	"log"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
)

// NodeStatus –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É–∑–ª–∞
type NodeStatus struct {
	Name     string
	Status   string
	LastSeen time.Time
	Notified bool
}

// Monitor —Å–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–∑–ª–æ–≤
type Monitor struct {
	clientset *kubernetes.Clientset
	bot       *tgbotapi.BotAPI
	adminID   int64
	nodes     map[string]*NodeStatus
}

// NewMonitor —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä
func NewMonitor(clientset *kubernetes.Clientset, bot *tgbotapi.BotAPI, adminID int64) *Monitor {
	return &Monitor{
		clientset: clientset,
		bot:       bot,
		adminID:   adminID,
		nodes:     make(map[string]*NodeStatus),
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
func (m *Monitor) Start(ctx context.Context) {
	ticker := time.NewTicker(1 * time.Minute) // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
	defer ticker.Stop()

	log.Println("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–∑–ª–æ–≤...")

	for {
		select {
		case <-ctx.Done():
			log.Println("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
			return
		case <-ticker.C:
			m.checkNodes(ctx)
		}
	}
}

// checkNodes –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —É–∑–ª–æ–≤
func (m *Monitor) checkNodes(ctx context.Context) {
	nodes, err := m.clientset.CoreV1().Nodes().List(ctx, metav1.ListOptions{})
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–∑–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: %v", err)
		return
	}

	now := time.Now()
	currentNodes := make(map[string]bool)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —É–∑–ª—ã
	for _, node := range nodes.Items {
		nodeName := node.Name
		currentNodes[nodeName] = true

		isReady := false
		for _, cond := range node.Status.Conditions {
			if cond.Type == corev1.NodeReady && cond.Status == corev1.ConditionTrue {
				isReady = true
				break
			}
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å —É–∑–ª–∞
		if status, exists := m.nodes[nodeName]; exists {
			if isReady {
				// –£–∑–µ–ª –≤ –Ω–æ—Ä–º–µ
				status.Status = "Ready"
				status.LastSeen = now
				if status.Notified {
					m.sendRecoveryNotification(nodeName)
					status.Notified = false
				}
			} else {
				// –£–∑–µ–ª –Ω–µ –≥–æ—Ç–æ–≤
				status.Status = "NotReady"
				duration := now.Sub(status.LastSeen)
				if duration >= 10*time.Minute && !status.Notified {
					m.sendAlertNotification(nodeName, duration)
					status.Notified = true
				}
			}
		} else {
			// –ù–æ–≤—ã–π —É–∑–µ–ª
			m.nodes[nodeName] = &NodeStatus{
				Name:     nodeName,
				Status:   "Ready",
				LastSeen: now,
				Notified: false,
			}
			if !isReady {
				m.nodes[nodeName].Status = "NotReady"
			}
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —É–∑–ª—ã
	for nodeName, status := range m.nodes {
		if !currentNodes[nodeName] {
			duration := now.Sub(status.LastSeen)
			if duration >= 10*time.Minute && !status.Notified {
				m.sendNodeMissingNotification(nodeName, duration)
				status.Notified = true
			}
		}
	}
}

// sendAlertNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å —É–∑–ª–æ–º
func (m *Monitor) sendAlertNotification(nodeName string, duration time.Duration) {
	message := fmt.Sprintf("üö® *ALERT: Node Down*\n\n"+
		"üîß *Node:* `%s`\n"+
		"‚è∞ *Downtime:* %s\n"+
		"üìä *Status:* Not Ready\n\n"+
		"‚ö†Ô∏è –£–∑–µ–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç!",
		nodeName, formatDurationForAlert(duration))

	sendText(m.bot, m.adminID, message)
	log.Printf("üîî –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å —É–∑–ª–æ–º: %s", nodeName)
}

// sendRecoveryNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —É–∑–ª–∞
func (m *Monitor) sendRecoveryNotification(nodeName string) {
	message := fmt.Sprintf("‚úÖ *RECOVERY: Node Back Online*\n\n"+
		"üîß *Node:* `%s`\n"+
		"üìä *Status:* Ready\n\n"+
		"üéâ –£–∑–µ–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª —Ä–∞–±–æ—Ç—É!",
		nodeName)

	sendText(m.bot, m.adminID, message)
	log.Printf("üîî –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —É–∑–ª–∞: %s", nodeName)
}

// sendNodeMissingNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–º —É–∑–ª–µ
func (m *Monitor) sendNodeMissingNotification(nodeName string, duration time.Duration) {
	message := fmt.Sprintf("‚ùå *CRITICAL: Node Missing*\n\n"+
		"üîß *Node:* `%s`\n"+
		"‚è∞ *Missing for:* %s\n\n"+
		"üö® –£–∑–µ–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç!",
		nodeName, formatDurationForAlert(duration))

	sendText(m.bot, m.adminID, message)
	log.Printf("üîî –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–º —É–∑–ª–µ: %s", nodeName)
}

// formatDurationForAlert —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func formatDurationForAlert(d time.Duration) string {
	minutes := int(d.Minutes())
	if minutes < 60 {
		return fmt.Sprintf("%d minutes", minutes)
	}
	hours := minutes / 60
	remainingMinutes := minutes % 60
	if remainingMinutes > 0 {
		return fmt.Sprintf("%d hours %d minutes", hours, remainingMinutes)
	}
	return fmt.Sprintf("%d hours", hours)
}

// GetNodeStatuses –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã —É–∑–ª–æ–≤
func (m *Monitor) GetNodeStatuses() map[string]*NodeStatus {
	return m.nodes
}
