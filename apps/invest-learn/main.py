import requests
import psycopg2
from datetime import datetime
import schedule
import time
import os
from decimal import Decimal
import pandas as pd
from ta.momentum import RSIIndicator
from ta.trend import MACD, SMAIndicator

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
DB_CONFIG = {
    "host": "localhost",
    "port": 5432,
    "database": "invest",
    "user": "invest_user",
    "password": "secure_password_123"
}
TARGET_BOARD = "TQBR"
TICKERS_FILE = "tickers.txt"
INTERVAL_MINUTES = 1  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
def init_db():
    conn = psycopg2.connect(**DB_CONFIG)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS quotes (
            id SERIAL PRIMARY KEY,
            ticker TEXT NOT NULL,
            price NUMERIC(10, 4) NOT NULL,
            signal TEXT,
            timestamp TIMESTAMPTZ DEFAULT NOW()
        );
        CREATE INDEX IF NOT EXISTS idx_ticker_timestamp ON quotes (ticker, timestamp);
    """)
    conn.commit()
    cursor.close()
    conn.close()

# --- –ß—Ç–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ ---
def load_tickers():
    if not os.path.exists(TICKERS_FILE):
        print(f"‚ö†Ô∏è –§–∞–π–ª {TICKERS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –ø—Ä–∏–º–µ—Ä.")
        with open(TICKERS_FILE, "w") as f:
            f.write("SBER\nGAZP\nLKOH\nYNDX\n")
        return ["SBER", "GAZP", "LKOH", "YNDX"]
    with open(TICKERS_FILE, "r") as f:
        return [line.strip().upper() for line in f if line.strip()]

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def get_moex_price(ticker: str, target_board: str = TARGET_BOARD) -> float | None:
    url = f"https://iss.moex.com/iss/engines/stock/markets/shares/securities/{ticker}.json"
    try:
        response = requests.get(url, timeout=10)
        if response.status_code != 200:
            print(f"‚ùå HTTP {response.status_code} –¥–ª—è {ticker}")
            return None

        data = response.json()
        marketdata = data.get("marketdata", {})
        columns = marketdata.get("columns", [])
        rows = marketdata.get("data", [])

        if not columns or not rows:
            print(f"‚ùå –ù–µ—Ç marketdata –¥–ª—è {ticker}")
            return None

        try:
            boardid_idx = columns.index("BOARDID")
            last_idx = columns.index("LAST")
        except ValueError:
            print(f"‚ùå –ö–æ–ª–æ–Ω–∫–∏ BOARDID/LAST –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è {ticker}")
            return None

        for row in rows:
            if len(row) > boardid_idx and row[boardid_idx] == target_board:
                if len(row) > last_idx and row[last_idx] is not None:
                    return float(row[last_idx])
        print(f"‚ùå Board {target_board} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ LAST=null –¥–ª—è {ticker}")
        return None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {ticker}: {e}")
        return None

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î ---
def save_price_with_signal(ticker: str, price: float, signal: str):
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO quotes (ticker, price, signal) VALUES (%s, %s, %s)",
            (ticker, price, signal)
        )
        conn.commit()
        cursor.close()
        conn.close()
        print(f"- {ticker}: {price} ‚ÇΩ | {signal}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î –¥–ª—è {ticker}: {e}")

# --- –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å–±–æ—Ä–∞ ---
def fetch_all_tickers():
    print(f"\nüïí –°–±–æ—Ä –∫–æ—Ç–∏—Ä–æ–≤–æ–∫: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    tickers = load_tickers()
    for ticker in tickers:
        price = get_moex_price(ticker)
        if price is not None:
            signal = calculate_signal(ticker, price, window=5)
            save_price_with_signal(ticker, price, signal)
        else:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω {ticker}")

def calculate_signal(ticker: str, current_price: float, window: int = 5) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: 'BUY', 'SELL', 'NO_SIGNAL'
    """
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        cursor.execute("""
            SELECT price FROM quotes
            WHERE ticker = %s
            ORDER BY timestamp DESC
            LIMIT %s
        """, (ticker, window - 1))

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Decimal ‚Üí float
        past_prices = [float(row[0]) for row in cursor.fetchall()]
        cursor.close()
        conn.close()

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É (—É–∂–µ float)
        all_prices = past_prices[::-1] + [current_price]  # —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫

        if len(all_prices) < window:
            return "NO_SIGNAL"

        sma = sum(all_prices[-window:]) / window
        if current_price > sma:
            return "BUY"
        elif current_price < sma:
            return "SELL"
        else:
            return "HOLD"

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {ticker}: {e}")
        return "NO_SIGNAL"  
# --- –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª ---
if __name__ == "__main__":
    init_db()
    tickers = load_tickers()
    print(f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤: {len(tickers)} ‚Äî {', '.join(tickers)}")

    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É
    fetch_all_tickers()

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    schedule.every(INTERVAL_MINUTES).minutes.do(fetch_all_tickers)

    print(f"‚è±Ô∏è  –°–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä —á–µ—Ä–µ–∑ {INTERVAL_MINUTES} –º–∏–Ω—É—Ç...")
    while True:
        schedule.run_pending()
        time.sleep(30)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫