---
apiVersion: v1
kind: Namespace
metadata:
  name: homer
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: homer-config-writer
  namespace: homer
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: homer-config-reader
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["create", "get", "list", "watch", "update", "patch"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: homer-config-writer-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: homer-config-reader
subjects:
  - kind: ServiceAccount
    name: homer-config-writer
    namespace: homer
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: homer-config-gen
  namespace: homer
spec:
  schedule: "*/30 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: homer-config-writer
          restartPolicy: OnFailure
          containers:
            - name: generator
              image: alpine:3.20
              command:
                - /bin/sh
                - -c
                - |
                  set -e
                  apk add --no-cache bash jq coreutils kubectl >/dev/null 2>&1

                  # Получаем список ingress с host и namespace
                  kubectl get ingress -A -o json | jq -r '
                    .items[] |
                    .metadata.name as $name |
                    .metadata.namespace as $ns |
                    (.spec.rules[]?.host // empty) as $host |
                    "- name: \($name)\n  url: http://\($host)\n  subtitle: Ingress\n  tag: k8s"
                  ' > /tmp/services.yml

                  # Генерим полный config.yml
                  echo "title: \"K8s Services\"" > /tmp/config.yml
                  echo "subtitle: \"Автоматически собранные ingress\"" >> /tmp/config.yml
                  echo "services:" >> /tmp/config.yml
                  sed 's/^/  /' /tmp/services.yml >> /tmp/config.yml

                  # Применяем ConfigMap
                  kubectl create configmap homer-config \
                    --from-file=config.yml=/tmp/config.yml \
                    -o yaml --dry-run=client | kubectl apply -f -
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: homer
  namespace: homer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: homer
  template:
    metadata:
      labels:
        app: homer
    spec:
      containers:
        - name: homer
          image: b4bz/homer:latest
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: config
              mountPath: /www/assets/config.yml
              subPath: config.yml
      volumes:
        - name: config
          configMap:
            name: homer-config
---
apiVersion: v1
kind: Service
metadata:
  name: homer
  namespace: homer
spec:
  selector:
    app: homer
  ports:
    - port: 80
      targetPort: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: homer-ingress
  namespace: homer
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
    - host: start.home
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: homer
                port:
                  number: 80