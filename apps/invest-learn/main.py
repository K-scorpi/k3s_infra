import requests
import sqlite3
from datetime import datetime

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
DB_PATH = "quotes.db"
TARGET_BOARD = "TQBR"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS quotes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            ticker TEXT NOT NULL,
            price REAL NOT NULL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å MOEX ---
def get_moex_price(ticker: str, target_board: str = TARGET_BOARD) -> float | None:
    url = f"https://iss.moex.com/iss/engines/stock/markets/shares/securities/{ticker}.json"
    response = requests.get(url)
    if response.status_code != 200:
        print(f"‚ùå HTTP Error: {response.status_code}")
        return None

    data = response.json()
    marketdata = data.get("marketdata", {})
    columns = marketdata.get("columns", [])
    rows = marketdata.get("data", [])

    if not columns or not rows:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö marketdata")
        return None

    try:
        boardid_idx = columns.index("BOARDID")
        last_idx = columns.index("LAST")
    except ValueError as e:
        print(f"‚ùå –ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {e}")
        return None

    for row in rows:
        if len(row) > boardid_idx and row[boardid_idx] == target_board:
            if len(row) > last_idx and row[last_idx] is not None:
                return float(row[last_idx])
    print(f"‚ùå Board {target_board} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ LAST = null –¥–ª—è {ticker}")
    return None

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –ë–î ---
def save_price_to_db(ticker: str, price: float):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO quotes (ticker, price) VALUES (?, ?)",
        (ticker, price)
    )
    conn.commit()
    conn.close()
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {ticker} = {price} ‚ÇΩ –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    init_db()
    ticker = "SBER"
    price = get_moex_price(ticker)
    if price is not None:
        print(f"‚úÖ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {ticker}: {price} ‚ÇΩ")
        save_price_to_db(ticker, price)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É")