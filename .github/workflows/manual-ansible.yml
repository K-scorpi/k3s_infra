name: Manual Ansible Operations

on:
  workflow_dispatch:
    inputs:
      playbook:
        description: 'Playbook to run'
        required: true
        type: choice
        options: #написать плейбуки
          - playbooks/setup-servers.yml
          - playbooks/k3s-health-check.yml
          - playbooks/disk-cleanup.yml
          - playbooks/disk-analyze.yml
      force_run:
        description: 'Force run (skip changes detection)'
        required: false
        type: boolean
        default: false

jobs:
  detect-changes:
    name: Detect Changes in Ansible
    runs-on: ubuntu-latest
    outputs:
      ansible-changed: ${{ steps.changes.outputs.ansible }}
      playbooks-changed: ${{ steps.changes.outputs.playbooks }}
      inventory-changed: ${{ steps.changes.outputs.inventory }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get changed files
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            ansible:
              - 'ansible/**'
            playbooks:
              - 'ansible/playbooks/**'
            inventory:
              - 'ansible/inventories/**'

  ansible-lint:
    name: Lint Ansible Files
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.ansible-changed == 'true' ||
      github.event.inputs.force_run == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Ansible and Lint
        run: |
          python -m pip install --upgrade pip
          pip install ansible ansible-lint yamllint

      - name: Run yamllint on Ansible files
        run: |
          echo "🔍 Checking YAML syntax..."
          yamllint ansible/ || echo "YAML linting completed"

      - name: Run ansible-lint
        run: |
          echo "🔍 Running ansible-lint..."
          if [ -f "ansible/ansible.cfg" ]; then
            cd ansible
            ansible-lint playbooks/ || echo "Ansible linting completed"
          else
            ansible-lint ansible/playbooks/ || echo "Ansible linting completed"
          fi

      - name: Validate playbook syntax
        run: |
          echo "🔍 Validating playbook syntax..."
          cd ansible
          for playbook in playbooks/*.yml; do
            if [ -f "$playbook" ]; then
              echo "Validating $playbook"
              ansible-playbook "$playbook" --syntax-check || exit 1
            fi
          done

  ansible-deploy:
    name: Run Ansible Playbook
    runs-on: ubuntu-latest
    needs: 
      - detect-changes
      - ansible-lint
    if: |
      (needs.detect-changes.outputs.ansible-changed == 'true' && needs.ansible-lint.result == 'success') ||
      github.event.inputs.force_run == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Create secrets directory
        run: |
          mkdir -p ansible/secrets
          chmod 700 ansible/secrets

      - name: Setup SSH key from secrets
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ansible/secrets/ansible_key
          chmod 600 ansible/secrets/ansible_key

      - name: Create hosts.secret file
        run: |
          cat > ansible/secrets/hosts.secret << 'EOF'
          [all:vars]
          ansible_connection=ssh
          ansible_ssh_common_args='-o StrictHostKeyChecking=no'
          ansible_user=aroot
          ansible_ssh_port=2224

          [k3s_cluster]
          deep_host ansible_host=${{ secrets.DEEP_HOST_IP }}
          tvldd_vm001 ansible_host=${{ secrets.TVLDD_VM001_IP }}
          vpsone ansible_host=${{ secrets.VPSONE_IP }}

          [k3s_masters:children]
          k3s_cluster
          EOF

      - name: Show changes summary
        run: |
          echo "📋 Changes Summary:"
          echo "Ansible changed: ${{ needs.detect-changes.outputs.ansible-changed }}"
          echo "Playbooks changed: ${{ needs.detect-changes.outputs.playbooks-changed }}"
          echo "Inventory changed: ${{ needs.detect-changes.outputs.inventory-changed }}"
          echo "Force run: ${{ github.event.inputs.force_run }}"

      - name: Test inventory parsing
        run: |
          cd ansible
          ansible-inventory -i secrets/hosts.secret --list

      - name: Test SSH connection
        run: |
          cd ansible
          ansible all -m ping -i secrets/hosts.secret

      - name: Run Ansible playbook
        run: |
          cd ansible
          echo "🚀 Running playbook: ${{ github.event.inputs.playbook }}"
          ansible-playbook "${{ github.event.inputs.playbook }}" -i secrets/hosts.secret

      - name: Cleanup secrets
        if: always()
        run: |
          rm -rf ansible/secrets/