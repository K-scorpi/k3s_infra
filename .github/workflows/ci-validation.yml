name: CI - Security, Code Quality & Kubernetes Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  go-lint-all:
    name: Go Code Quality (All Projects)
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache-dependency-path: |
            **/go.sum

      - name: Install Go tools
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Find and lint all Go projects
        run: |
          echo "üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö Go –ø—Ä–æ–µ–∫—Ç–æ–≤..."
          # –ò—â–µ–º –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å go.mod
          GO_PROJECTS=$(find . -name "go.mod" -type f | sed 's|/go.mod||' | grep -v "vendor\|.git\|node_modules")  
          if [ -z "$GO_PROJECTS" ]; then
            echo "‚ùå Go –ø—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            exit 1
          fi
          echo "üìÅ –ù–∞–π–¥–µ–Ω—ã Go –ø—Ä–æ–µ–∫—Ç—ã:"
          echo "$GO_PROJECTS"
          FAILED_PROJECTS=""
          for project in $GO_PROJECTS; do
            echo ""
            echo "üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: $project"
            echo "=========================================="
            cd "$project"
            if [ ! -f "go.mod" ]; then
              echo "‚ùå go.mod –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $project, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º..."
              cd - > /dev/null
              continue
            fi
            if ! ../../scripts/lint-go.sh .; then
              FAILED_PROJECTS="$FAILED_PROJECTS $project"
            fi
            cd - > /dev/null
          done
          
          if [ -n "$FAILED_PROJECTS" ]; then
            echo ""
            echo "‚ùå –°–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É:$FAILED_PROJECTS"
            exit 1
          else
            echo ""
            echo "‚úÖ –í—Å–µ Go –ø—Ä–æ–µ–∫—Ç—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —É—Å–ø–µ—à–Ω–æ!"
          fi

  python-lint:
    name: Python Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install linting tools
        run: |
          python3 -m pip install --upgrade pip
          pip3 install black isort flake8 pylint mypy

      - name: Copy lint script
        run: |
          # –ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç –ª–∏–Ω—Ç–∏–Ω–≥–∞ –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
          cat > lint_python.py << 'EOF'
          # –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫—Ä–∏–ø—Ç–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
          EOF
      - name: Run comprehensive linting
        run: |
          echo "=== Current directory structure ==="
          find . -name "*.py" -type f | head -20
          echo "=== Running lint script ==="
          python3 lint_python.py --verbose 

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-trivy-

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          exit-code: 0
          format: 'table'
          output: 'trivy-results.txt'

      - name: Show Trivy results
        if: always()
        run: |
          echo "=== Trivy Results ==="
          cat trivy-results.txt || echo "No results file"

      - name: Dockerfile scan
        if: hashFiles('Dockerfile') != ''
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          exit-code: 0
          format: 'table'

  k8s-validate:
    name: Kubernetes Manifest Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install kubeval
        run: |
          wget -q https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar -xzf kubeval-linux-amd64.tar.gz
          sudo mv kubeval /usr/local/bin/

      - name: Validate Kubernetes manifests
        run: |
          echo "üîç Validating Kubernetes YAML manifests..."
          find . -name "*.yaml" -not -path "./secret/*" -not -name "*values.yaml" | while read file; do
            echo "‚úÖ Validating $file"
            kubeval --strict --ignore-missing-schemas "$file"
          done
          echo "‚úÖ Validation complete"

  k3s-deploy-kind:
    name: Kubernetes Deploy on Kind
    runs-on: ubuntu-latest
    needs: k8s-validate
    if: ${{ success() }}
    steps:
      - uses: actions/checkout@v4

      - name: Install K3s
        run: |
          curl -sfL https://get.k3s.io | sh -
          sudo kubectl config set-context default

      - name: Wait for K3s to be ready
        run: |
          mkdir -p $HOME/.kube
          sudo cp /etc/rancher/k3s/k3s.yaml $HOME/.kube/config
          sudo chown $(id -u):$(id -g) $HOME/.kube/config

      - name: Create required namespaces
        run: |
          kubectl create namespace minio-system || true
          kubectl create namespace homer || true
          kubectl create namespace velero || true
          kubectl create namespace system-upgrade || true
          kubectl create namespace monitoring || true
          # –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ namespace, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞—Ö
          
      - name: Deploy manifests
        run: |
          find ./kuber/ -name '*.yaml' -exec kubectl apply -f {} \;

      - name: Check pods
        run: |
          sleep 30
          echo "üü¢ All pods:" 
          kubectl get pods -A

      - name: Show failed pods if any
        run: |
          echo "üî¥ Checking for failed or non-running pods..."
          sleep 15
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ "–ø–ª–æ—Ö–∏—Ö" pod‚Äô–æ–≤ (–Ω–µ Running –∏ –Ω–µ Succeeded)
          bad_pods=$(kubectl get pods -A --no-headers \
            --field-selector=status.phase!=Running,status.phase!=Succeeded 2>/dev/null \
            | grep -vE '^(homer|minio-system)\s' || true)
            
          if [ -n "$bad_pods" ]; then
            echo "‚ùå Some pods are not running successfully:"
            echo "$bad_pods"
            exit 1
          else
            echo "‚úÖ All pods are running or succeeded."
          fi
