name: CI - Security & Kubernetes Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-trivy-

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          exit-code: 0
          format: 'table'
          output: 'trivy-results.txt'

      - name: Show Trivy results
        if: always()
        run: |
          echo "=== Trivy Results ==="
          cat trivy-results.txt || echo "No results file"

      - name: Dockerfile scan
        if: hashFiles('Dockerfile') != ''
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          exit-code: 0
          format: 'table'

  k8s-validate:
    name: Kubernetes Manifest Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install kubeval
        run: |
          wget -q https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar -xzf kubeval-linux-amd64.tar.gz
          sudo mv kubeval /usr/local/bin/

      - name: Validate Kubernetes manifests
        run: |
          echo "üîç Validating Kubernetes YAML manifests..."
          find . -name "*.yaml" -not -path "./secret/*" -not -name "*values.yaml" | while read file; do
            echo "‚úÖ Validating $file"
            kubeval --strict --ignore-missing-schemas "$file"
          done
          echo "‚úÖ Validation complete"

  k3s-deploy-kind:
    name: Kubernetes Deploy on Kind
    runs-on: ubuntu-latest
    needs: k8s-validate
    if: ${{ success() }}
    steps:
      - uses: actions/checkout@v4

      - name: Install K3s
        run: |
          curl -sfL https://get.k3s.io | sh -
          sudo kubectl config set-context default

      - name: Wait for K3s to be ready
        run: |
          mkdir -p $HOME/.kube
          sudo cp /etc/rancher/k3s/k3s.yaml $HOME/.kube/config
          sudo chown $(id -u):$(id -g) $HOME/.kube/config
          kubectl get nodes
          
      - name: Create required namespaces
        run: |
          kubectl create namespace minio-system || true
          kubectl create namespace homer || true
          kubectl create namespace velero || true
          kubectl create namespace system-upgrade || true
          kubectl create namespace monitoring || true
          # –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ namespace, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞—Ö
          
      - name: Deploy manifests
        run: |
          find ./kuber/ -name '*.yaml' -exec kubectl apply -f {} \;

      - name: Wait for pods
        run: kubectl wait --for=condition=Ready pods --all --namespace -A --timeout=30s

      - name: Check pods
        run: kubectl get pods -n ci-test
