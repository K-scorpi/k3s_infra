#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–∏–Ω—Ç–∏–Ω–≥–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Python —Ñ–∞–π–ª–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç: black, isort, flake8, pylint
"""

import argparse
import os
import subprocess
import sys
from pathlib import Path
from typing import List, Tuple


class PythonLinter:
    def __init__(self, config_path: str = None):
        self.config_path = config_path
        self.setup_tools()

    def setup_tools(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        required_tools = ["black", "isort", "flake8", "pylint"]
        missing_tools = []

        for tool in required_tools:
            try:
                subprocess.run([tool, "--version"], capture_output=True, check=True)
            except (subprocess.CalledProcessError, FileNotFoundError):
                missing_tools.append(tool)

        if missing_tools:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(missing_tools)}")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö:")
            print("pip install black isort flake8 pylint")
            sys.exit(1)

    def find_python_files(
        self, path: str, exclude_dirs: List[str] = None
    ) -> List[Path]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        if exclude_dirs is None:
            exclude_dirs = [
                "__pycache__",
                ".git",
                ".venv",
                "venv",
                "env",
                "node_modules",
            ]

        python_files = []
        path_obj = Path(path)

        if path_obj.is_file() and path_obj.suffix == ".py":
            return [path_obj]

        for py_file in path_obj.rglob("*.py"):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if any(excluded in py_file.parts for excluded in exclude_dirs):
                continue
            python_files.append(py_file)

        return python_files

    def run_black(self, files: List[Path]) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é black"""
        print("üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å Black...")
        try:
            cmd = ["black"] + [str(f) for f in files]
            result = subprocess.run(cmd, capture_output=True, text=True)

            if result.returncode == 0:
                print("‚úÖ Black: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"‚ùå Black: –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                print(result.stderr)
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Black: {e}")
            return False

    def run_isort(self, files: List[Path]) -> bool:
        """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã —Å –ø–æ–º–æ—â—å—é isort"""
        print("üìö –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ —Å Isort...")
        try:
            cmd = ["isort"] + [str(f) for f in files]
            result = subprocess.run(cmd, capture_output=True, text=True)

            if result.returncode == 0:
                print("‚úÖ Isort: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                return True
            else:
                print(f"‚ùå Isort: –æ—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
                print(result.stderr)
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Isort: {e}")
            return False

    def run_flake8(self, files: List[Path]) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∏–ª—å –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é flake8"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è —Å Flake8...")
        try:
            cmd = ["flake8"] + [str(f) for f in files]
            result = subprocess.run(cmd, capture_output=True, text=True)

            if result.returncode == 0:
                print("‚úÖ Flake8: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –ø—Ä–æ–π–¥–µ–Ω–∞")
                return True, result.stdout
            else:
                print("‚ö†Ô∏è  Flake8: –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∏–ª–µ–º")
                return False, result.stdout

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Flake8: {e}")
            return False, str(e)

    def run_pylint(self, files: List[Path]) -> Tuple[bool, str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é pylint"""
        print("üîé –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å Pylint...")
        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            cmd = ["pylint", "--output-format=text", "--score=yes"] + [
                str(f) for f in files
            ]
            result = subprocess.run(cmd, capture_output=True, text=True)

            if result.returncode == 0:
                print("‚úÖ Pylint: –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True, result.stdout
            else:
                print("‚ö†Ô∏è  Pylint: –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ")
                return False, result.stdout

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Pylint: {e}")
            return False, str(e)

    def lint_files(self, files: List[Path], fix: bool = False) -> bool:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–∏–Ω—Ç–∏–Ω–≥–∞"""
        print(f"üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(files)} Python —Ñ–∞–π–ª–æ–≤...")

        success = True

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ fix=True)
        if fix:
            if not self.run_black(files):
                success = False
            if not self.run_isort(files):
                success = False

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        flake8_ok, flake8_output = self.run_flake8(files)
        if not flake8_ok and flake8_output:
            print("\n--- Flake8 Issues ---")
            print(flake8_output)
            success = False

        pylint_ok, pylint_output = self.run_pylint(files)
        if not pylint_ok and pylint_output:
            print("\n--- Pylint Issues ---")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            lines = pylint_output.split("\n")[:20]
            print("\n".join(lines))
            if len(pylint_output.split("\n")) > 20:
                print("... (–≤—ã–≤–æ–¥ –æ–±—Ä–µ–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --verbose –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞)")
            success = True

        return success


def main():
    parser = argparse.ArgumentParser(description="Python –ª–∏–Ω—Ç–µ—Ä –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫")
    parser.add_argument(
        "path",
        nargs="?",
        default=".",
        help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)",
    )
    parser.add_argument(
        "--fix",
        action="store_true",
        help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∏–º–ø–æ—Ä—Ç—ã",
    )
    parser.add_argument(
        "--exclude",
        nargs="+",
        default=["__pycache__", ".git", ".venv", "venv"],
        help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è",
    )
    parser.add_argument("--verbose", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")

    args = parser.parse_args()

    linter = PythonLinter()

    # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã
    files = linter.find_python_files(args.path, args.exclude)

    if not files:
        print("‚ùå Python —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        sys.exit(1)

    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(files)} Python —Ñ–∞–π–ª–æ–≤")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–∏–Ω—Ç–∏–Ω–≥
    success = linter.lint_files(files, args.fix)

    if success:
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\n‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ")
        sys.exit(1)


if __name__ == "__main__":
    main()
