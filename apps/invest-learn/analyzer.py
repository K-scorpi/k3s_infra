# analyzer.py
import pandas as pd
import sys
from datetime import datetime
import time
import schedule
from ta.volatility import BollingerBands, AverageTrueRange
from ta.volume import VolumeWeightedAveragePrice
from ta.momentum import RSIIndicator
from ta.trend import MACD, SMAIndicator
from sqlalchemy import text
from common import get_sqlalchemy_engine, load_tickers
from llm import explain_signal_with_llm

engine = get_sqlalchemy_engine()

def analyze_ticker(ticker: str):
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ —Å–∏–≥–Ω–∞–ª–∞
    df = pd.read_sql("""
        SELECT id, price FROM quotes 
        WHERE ticker = %s AND signal IS NULL 
        ORDER BY timestamp ASC
        LIMIT 1
    """, engine, params=(ticker,))
    if df.empty:
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    hist = pd.read_sql("""
        SELECT price FROM quotes 
        WHERE ticker = %s 
        ORDER BY timestamp ASC
    """, engine, params=(ticker,))
    
    if len(hist) < 20:
        print(f"‚è≥ {ticker}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return

    for _, row in df.iterrows():
        full_prices = pd.concat([hist, pd.DataFrame([{"price": row['price']}])], ignore_index=True)
        
        # --- –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã ---
        full_prices['sma_5'] = SMAIndicator(close=full_prices['price'], window=5).sma_indicator()
        full_prices['sma_20'] = SMAIndicator(close=full_prices['price'], window=20).sma_indicator()
        full_prices['rsi'] = RSIIndicator(close=full_prices['price'], window=14).rsi()
        macd_obj = MACD(close=full_prices['price'])
        full_prices['macd'] = macd_obj.macd()
        full_prices['macd_signal'] = macd_obj.macd_signal()

        # --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã ---
        bb = BollingerBands(close=full_prices['price'], window=20, window_dev=2)
        full_prices['bb_high'] = bb.bollinger_hband()
        full_prices['bb_low'] = bb.bollinger_lband()
        full_prices['bb_mid'] = bb.bollinger_mavg()
        full_prices['atr'] = AverageTrueRange(high=full_prices['price'], low=full_prices['price'], close=full_prices['price'], window=14).average_true_range()

        last = full_prices.iloc[-1]
        prev = full_prices.iloc[-2] if len(full_prices) > 1 else None

        reasons = []
        buy_signals = 0
        sell_signals = 0

        # --- –¶–µ–Ω–∞ –∏ —Å–∫–æ–ª—å–∑—è—â–∏–µ ---
        if last['price'] > last['sma_20']:
            reasons.append("—Ü–µ–Ω–∞ –≤—ã—à–µ 20-–¥–Ω–µ–≤–Ω–æ–π SMA ‚Äî –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
            buy_signals += 1
        if last['price'] < last['sma_20']:
            reasons.append("—Ü–µ–Ω–∞ –Ω–∏–∂–µ 20-–¥–Ω–µ–≤–Ω–æ–π SMA ‚Äî –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
            sell_signals += 1

        # --- RSI ---
        if last['rsi'] < 30:
            reasons.append("RSI < 30 ‚Äî –∞–∫—Ü–∏—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–∞")
            buy_signals += 1
        elif last['rsi'] > 70:
            reasons.append("RSI > 70 ‚Äî –∞–∫—Ü–∏—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–∞")
            sell_signals += 1

        # --- –î–∏–≤–µ—Ä–≥–µ–Ω—Å (—É–ø—Ä–æ—â—ë–Ω–Ω–æ) ---
        if prev is not None and last['rsi'] < prev['rsi'] and last['price'] > prev['price']:
            reasons.append("–º–µ–¥–≤–µ–∂–∏–π –¥–∏–≤–µ—Ä–≥–µ–Ω—Å –ø–æ RSI ‚Äî –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–Ω–∏–∑")
            sell_signals += 1
        elif prev is not None and last['rsi'] > prev['rsi'] and last['price'] < prev['price']:
            reasons.append("–±—ã—á–∏–π –¥–∏–≤–µ—Ä–≥–µ–Ω—Å –ø–æ RSI ‚Äî –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–≤–µ—Ä—Ö")
            buy_signals += 1

        # --- Bollinger Bands ---
        if last['price'] > last['bb_high']:
            reasons.append("—Ü–µ–Ω–∞ –≤—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ ‚Äî –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å")
            sell_signals += 1
        elif last['price'] < last['bb_low']:
            reasons.append("—Ü–µ–Ω–∞ –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ ‚Äî –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å")
            buy_signals += 1

        # --- MACD ---
        if not pd.isna(last['macd']) and not pd.isna(last['macd_signal']):
            if last['macd'] > last['macd_signal']:
                reasons.append("MACD –≤—ã—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ ‚Äî –±—ã—á–∏–π –∏–º–ø—É–ª—å—Å")
                buy_signals += 1
            else:
                reasons.append("MACD –Ω–∏–∂–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ ‚Äî –º–µ–¥–≤–µ–∂–∏–π –∏–º–ø—É–ª—å—Å")
                sell_signals += 1

        # --- –†–µ—à–µ–Ω–∏–µ ---
        if buy_signals >= 2 and sell_signals == 0:
            signal = "BUY"
        elif sell_signals >= 2 and buy_signals == 0:
            signal = "SELL"
        else:
            signal = "HOLD"

        # --- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è LLM ---
        meta = {
            "price": float(row['price']),
            "sma_5": float(last['sma_5']) if not pd.isna(last['sma_5']) else None,
            "sma_20": float(last['sma_20']) if not pd.isna(last['sma_20']) else None,
            "rsi": float(last['rsi']) if not pd.isna(last['rsi']) else None,
            "macd": float(last['macd']) if not pd.isna(last['macd']) else None,
            "macd_signal": float(last['macd_signal']) if not pd.isna(last['macd_signal']) else None,
            "bb_high": float(last['bb_high']) if not pd.isna(last['bb_high']) else None,
            "bb_low": float(last['bb_low']) if not pd.isna(last['bb_low']) else None,
            "atr": float(last['atr']) if not pd.isna(last['atr']) else None,
            "signal": signal,
            "reasons": reasons
        }
        
        if signal == "HOLD" and len(reasons) <= 1:
            explanation = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
        else:
            explanation = explain_signal_with_llm(ticker, meta)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î (—Å –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤!)
        with engine.connect() as conn:
            conn.execute(
                text("""
                    UPDATE quotes 
                    SET signal = :signal, explanation = :explanation 
                    WHERE id = :id
                """),
                {
                    "signal": signal,
                    "explanation": explanation,
                    "id": int(row['id'])  # ‚Üê –∫–ª—é—á–µ–≤–æ–µ: numpy ‚Üí int
                }
            )
            conn.commit()

        print(f"üß† {ticker}: {signal}")
        print(f"üí¨ {explanation}\n")

def analyze_all():
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    for ticker in load_tickers():
        try:
            analyze_ticker(ticker)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {ticker}: {e}")

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "--once":
        analyze_all()
    else:
        # –§–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º: –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
        analyze_all()
        schedule.every(2).minutes.do(analyze_all)
        while True:
            schedule.run_pending()
            time.sleep(30)